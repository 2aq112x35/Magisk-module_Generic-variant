#!/sbin/sh

#################
# Initialization
#################
umask 022

# Global vars
TMPDIR=/dev/tmp
PERSISTDIR=/sbin/.magisk/mirror/persist

rm -rf $TMPDIR 2>/dev/null
mkdir -p $TMPDIR

# echo before loading util_functions
ui_print() { echo "$1"; }

require_new_magisk() {
  ui_print "*******************************"
  ui_print " Please install Magisk v19.0+! "
  ui_print "*******************************"
  exit 1
}

is_legacy_script() {
  unzip -l "$ZIPFILE" install.sh | grep -q install.sh
  return $?
}

print_modname() {
  ui_print "*******************************"
  ui_print "         优化运行参数      "
  ui_print "        Generic-variant      "
  ui_print "*******************************"
  ui_print ""
  ui_print "将运行参数微架构优化的部分改成通用(generic)提升一点性能（老机型可能反效果）。"
  ui_print "set prop cpu_variant=generic to fix performance(old phone maybe bad than ago)."
  ui_print ""
  ui_print "ro.bionic.cpu_variant=generic"
  ui_print "ro.bionic.2nd_cpu_variant=generic"
  ui_print "dalvik.vm.isa.arm64.variant=generic"
  ui_print "dalvik.vm.isa.arm.variant=generic"
  ui_print ""
  ui_print '如果无法开机，删除/data/adb/modules/runOPT/common目录和system.prop'
  ui_print 'If can`t boot, delete /data/adb/modules/runOPT/common and system.prop'
  ui_print '-----------------------------------'
}

##############
# Environment
##############

OUTFD=$2
ZIPFILE=$3

mount /data 2>/dev/null

# Load utility functions
[ -f /data/adb/magisk/util_functions.sh ] || require_new_magisk
. /data/adb/magisk/util_functions.sh
[ $MAGISK_VER_CODE -gt 18100 ] || require_new_magisk

# Preperation for flashable zips
setup_flashable

# Mount partitions
mount_partitions

# Detect version and architecture
api_level_arch_detect

# Setup busybox and binaries
$BOOTMODE && boot_actions || recovery_actions

##############
# Preparation
##############

# Extract prop file
unzip -o "$ZIPFILE" module.prop -d $TMPDIR >&2
[ ! -f $TMPDIR/module.prop ] && abort "! Unable to extract zip file!"

$BOOTMODE && MODDIRNAME=modules_update || MODDIRNAME=modules
MODULEROOT=$NVBASE/$MODDIRNAME
MODID=`grep_prop id $TMPDIR/module.prop`
MODPATH=$MODULEROOT/$MODID
MODNAME=`grep_prop name $TMPDIR/module.prop`

# Create mod paths
rm -rf $MODPATH 2>/dev/null
mkdir -p $MODPATH

##########
# Install
##########

#### check
prop1=`grep_prop ro.bionic.cpu_variant /vendor/default.prop`
prop2=`grep_prop ro.bionic.2nd_cpu_variant /vendor/default.prop`
prop3=`grep_prop dalvik.vm.isa.arm64.variant /vendor/default.prop`
prop4=`grep_prop dalvik.vm.isa.arm.variant /vendor/default.prop`

if [ "$prop1" = "" ] || [ "$prop2" = "" ] || [ "$prop3" = "" ] || [ "$prop4" = "" ];then
  ui_print ''
  ui_print "检查..."
  ui_print "checking..."
  ui_print ''
  ui_print "ro.bionic.cpu_variant"
  ui_print "ro.bionic.2nd_cpu_variant"
  ui_print "dalvik.vm.isa.arm64.variant"
  ui_print "dalvik.vm.isa.arm.variant"
  ui_print ''
  ui_print '不兼容（未在系统中发现相关参数)'
  ui_print 'Not supported(haven`t related prop.)'
  abort '--------------------------------'
fi
####

if is_legacy_script; then
  unzip -oj "$ZIPFILE" module.prop install.sh uninstall.sh 'common/*' -d $TMPDIR >&2

  # Load install script
  . $TMPDIR/install.sh

  # Callbacks
  print_modname
  on_install

  # Custom uninstaller
  [ -f $TMPDIR/uninstall.sh ] && cp -af $TMPDIR/uninstall.sh $MODPATH/uninstall.sh

  # Skip mount
  $SKIPMOUNT && touch $MODPATH/skip_mount

  # prop file
  $PROPFILE && cp -af $TMPDIR/system.prop $MODPATH/system.prop

  # Module info
  cp -af $TMPDIR/module.prop $MODPATH/module.prop

  # post-fs-data scripts
  $POSTFSDATA && cp -af $TMPDIR/post-fs-data.sh $MODPATH/post-fs-data.sh

  # service scripts
  $LATESTARTSERVICE && cp -af $TMPDIR/service.sh $MODPATH/service.sh

  ui_print "- Setting permissions"
  set_permissions
else
  print_modname

  unzip -o "$ZIPFILE" customize.sh -d $MODPATH >&2

  if ! grep -q '^SKIPUNZIP=1$' $MODPATH/customize.sh 2>/dev/null; then
    ui_print "- Extracting module files"
    unzip -o "$ZIPFILE" -x 'META-INF/*' -d $MODPATH >&2

    # Default permissions
    set_perm_recursive $MODPATH 0 0 0755 0644
  fi

  # Load customization script
  [ -f $MODPATH/customize.sh ] && . $MODPATH/customize.sh
fi

# Handle replace folders
for TARGET in $REPLACE; do
  ui_print "- Replace target: $TARGET"
  mktouch $MODPATH$TARGET/.replace
done

if $BOOTMODE; then
  # Update info for Magisk Manager
  mktouch $NVBASE/modules/$MODID/update
  cp -af $MODPATH/module.prop $NVBASE/modules/$MODID/module.prop
fi

# Copy over custom sepolicy rules
if [ -f $MODPATH/sepolicy.rule -a -e $PERSISTDIR ]; then
  ui_print "- Installing custom sepolicy patch"
  PERSISTMOD=$PERSISTDIR/magisk/$MODID
  mkdir -p $PERSISTMOD
  cp -af $MODPATH/sepolicy.rule $PERSISTMOD/sepolicy.rule
fi

# Remove stuffs that don't belong to modules
rm -rf \
$MODPATH/system/placeholder $MODPATH/customize.sh \
$MODPATH/README.md $MODPATH/.git* 2>/dev/null

##############
# Finalizing
##############

cd /
$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

ui_print "- Done"
exit 0